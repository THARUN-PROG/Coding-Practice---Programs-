Linear Search in Array - Searching Techniques - DSA



import java.util.*;

class LinearSearch{
  public static int find(int[] arr, int target)
  {
    for(int i=0;i<arr.length;i++)
      {
        if(arr[i]==target)
          return i;
      }

     return -1;
  }
}

public class Main {
  public static void main(String[] args) {
    int[] arr = { 1, 2, 7, 4, 5, 8 };
    System.out.println(LinearSearch.find(arr, 7));
  }
}

// Using contains Method

import java.util.*;

class LinearSearch{
  public static boolean contains(int[] arr, int target)
  {
    for(int i=0;i<arr.length;i++)
      {
        if(arr[i]==target)
          return true;
      }

     return false;
  }
}

public class Main {
  public static void main(String[] args) {
    int[] arr = { 1, 2, 7, 4, 5, 8 };
    System.out.println(LinearSearch.contains(arr, 7));
  }
}

// Searching in a String

import java.util.*;

class LinearSearch{
  public static int find(String str, char target)
  {
    for(int i=0;i<str.length();i++)
      {
        if(str.charAt(i)==target)
          return i;
      }

     return -1;
  }
}

public class Main {
  public static void main(String[] args) {
    // int[] arr = {1,2,7,4,5,8};
    String name = "Tharun";
    System.out.println(LinearSearch.find(name, 'T'));
  }
}

// Searching in 2D Array

import java.util.*;
import java.util.Arrays;

class LinearSearch {
  int[] arr = new int[] { 2, 3 };

  public static int find(int[][] arr, int target) {
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[row].length; col++) {
        if (arr[row][col] == target)
          return new int[] { row, col };
      }
    }

    return new int[] { -1, -1 };
  }
}

public class Main {
  public static void main(String[] args) {
    int[][] twoDArr = new int[][] {
        { 2, 5, 3 },
        { 5, 7, 3 },
        { 8, 3, 2 }
    };

    int[] result = LinearSearch.find(twoDArr, 7);
    System.out.println(Arrays.toString(result));
  }
}








Binary Search in Array - Searching Techniques - DSA













import java.util.*;

class BinarySearch
{
  public static int search(int[] arr, int target)
  {
    int start = 0;
    int end = arr.length-1;

    boolean asc = false;

    if(arr[start]<arr[end])
       asc = true;
    while(start<=end){
          int mid = (start+end)/2;

          if(asc) {   //asc array
          if(target>arr[mid])   //Focus on Right side
          {
            start = mid + 1;
          }

          else if(target<arr[mid])  //Focus on left Side
          {
            end = mid - 1;
          }
          else{
            return mid;
          }
          else{  //desc array
              if(target>arr[mid])   //Focus on Left side
          {
            end = mid - 1;
          }

          else if(target<arr[mid])  //Focus on Right Side
          {
            start = mid + 1;
          }
          else{
            return mid;
          }
          }

    }
    }
     return -1;
  }
}





public class Main
{
  public static void main(String[] args)
  {
    int[] arr = {1,3,5,6,10,12,15,20,21,28};
    System.out.println(BinarySearch.search(arr,12));
  }
}
